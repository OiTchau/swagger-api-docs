openapi: 3.1.0
webhooks:
  companyCreated:
    post:
      requestBody:
        description: Data of the created company
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CompanyCreatedEvent'
      responses:
        '200':
          description: >-
            Return a 200 status to indicate that the data was received
            successfully
  companyUpdated:
    post:
      requestBody:
        description: Data of the updated company
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CompanyUpdatedEvent'
      responses:
        '200':
          description: >-
            Return a 200 status to indicate that the data was received
            successfully
  userProfileCreated:
    post:
      requestBody:
        description: Data of the created user profile
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserProfileCreatedEvent'
      responses:
        '200':
          description: >-
            Return a 200 status to indicate that the data was received
            successfully
  userProfileUpdated:
    post:
      requestBody:
        description: Data of the updated user profile
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserProfileUpdatedEvent'
      responses:
        '200':
          description: >-
            Return a 200 status to indicate that the data was received
            successfully
  ClientCreated:
    post:
      requestBody:
        description: Data of the created client
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ClientCreatedEvent'
      responses:
        '200':
          description: >-
            Return a 200 status to indicate that the data was received successfully
  ClientUpdated:
    post:
      requestBody:
        description: Data of the updated client
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ClientUpdatedEvent'
      responses:
        '200':
          description: >-
            Return a 200 status to indicate that the data was received successfully
  ServiceCreated:
    post:
      requestBody:
        description: Data of the created service
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ServiceCreatedEvent'
      responses:
        '200':
          description: >-
            Return a 200 status to indicate that the data was received successfully
  ServiceUpdated:
    post:
      requestBody:
        description: Data of the updated service
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ServiceUpdatedEvent'
      responses:
        '200':
          description: >-
            Return a 200 status to indicate that the data was received successfully
  ServiceProfileAssigned:
    post:
      requestBody:
        description: Data of the associated profile to service
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ServiceProfile'
      responses:
        '200':
          description: >-
            Return a 200 status to indicate that the data was received successfully
  ServiceProfileRevoked:
    post:
      requestBody:
        description: Data of the revoked profile from service
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ServiceProfile'
      responses:
        '200':
          description: >-
            Return a 200 status to indicate that the data was received successfully
  ProjectCreated:
    post:
      requestBody:
        description: Data of the created project
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProjectCreatedEvent'
      responses:
        '200':
          description: >-
            Return a 200 status to indicate that the data was received successfully
  ProjectUpdated:
    post:
      requestBody:
        description: Data of the updated project
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProjectUpdatedEvent'
      responses:
        '200':
          description: >-
            Return a 200 status to indicate that the data was received successfully
  ProjectProfileAssigned:
    post:
      requestBody:
        description: Data of the profile associated with the project
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProjectProfile'
      responses:
        '200':
          description: >-
            Return a 200 status to indicate that the data was received successfully
  ProjectProfileRevoked:
    post:
      requestBody:
        description: Data of the profile revoked from the project
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProjectProfile'
      responses:
        '200':
          description: >-
            Return a 200 status to indicate that the data was received successfully
  ProjectServiceAssigned:
    post:
      requestBody:
        description: Data of the service assigned to the project
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProjectService'
      responses:
        '200':
          description: >-
            Return a 200 status to indicate that the data was received successfully
  ProjectServiceRevoked:
    post:
      requestBody:
        description: Data of the service revoked from the project
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProjectService'
      responses:
        '200':
          description: >-
            Return a 200 status to indicate that the data was received successfully
  TaskCreated:
    post:
      requestBody:
        description: Data of the created task
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TaskCreatedEvent'
      responses:
        '200':
          description: >-
            Return a 200 status to indicate that the data was received successfully
  TaskUpdated:
    post:
      requestBody:
        description: Data of the updated task
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TaskUpdatedEvent'
      responses:
        '200':
          description: >-
            Return a 200 status to indicate that the data was received successfully

info:
  title: Webhooks
  description: >-
    <h2>Summary</h2>
    Webhooks are automated messages sent from day.io when action with representing entity was successfully executed. <br />
    
    <h2>Scope of webhooks</h2>
    Webhooks can be configured for the partner, which means that all webhooks for partner related companies will be send to to the same url. <a href="https://app.swaggerhub.com/apis/Day.io/ExternalAPI/1.0.5#/configuration/ConfigurationController_upsertPartnerWebhookConfiguration">Create partner webhook configuration</a><br />
    Additionally we allow to create the dedicated webhook configuration per company. <a href="https://app.swaggerhub.com/apis/Day.io/ExternalAPI/1.0.5#/configuration/ConfigurationController_upsertCompanyWebhookConfiguration">Create company webhook configuration</a>
    
    <h2>Responded event data</h2>
    During webhook configuration you can specify <code>returnFullEntity</code> field (default is <code>true</code>) that flag will define type for event data, return full entity event data or only identifiers (<code>{uuid: string, externalId: string}</code>).<br />
    Each event will contain payload in format 
    <code>{
      data: {...\<eventData>},
      eventType: \<event type name>
    }</code>
    
    <h2>Verification of the webhook</h2>
    To ensure that webhook request was send from the <b>Day.io</b> you can verify webhook signature.<br />
    Day.io computes a hash message authentication code (HMAC) of the event payload using the <code>token</code> provided in the create webhook response as the secret and SHA256 as the hash function. Webhook event payloads include a Http-X-Dayio-Signature header, which is set to the computed HMAC.<br />
    Event payload integrity can be verified by the subscriber by computing the event payload HMAC and checking that it is equal to the HMAC in the Http-X-Dayio-Signature header.

  version: 1.0.2
  contact: {}
components:
  schemas:
    CompanyCreatedEvent:
      properties:
        data:
          description: Event data
          allOf:
            - $ref: '#/components/schemas/Company'
        eventType:
          type: string
          default: 'company:created'
    CompanyUpdatedEvent:
      properties:
        data:
          description: Event data
          allOf:
            - $ref: '#/components/schemas/Company'
        eventType:
          type: string
          default: 'company:updateAllFields'
    Company:
      properties:
        uuid:
          type: string
          description: Company internal uuid (in Dayio system)
        name:
          type: string
          description: Company name
        externalId:
          type: string
          description: Company external id (in the client system)
        active:
          type: boolean
          description: Is this company active or not
    UserProfileCreatedEvent:
      properties:
        data:
          description: Event data
          allOf:
            - $ref: '#/components/schemas/UserProfile'
        eventType:
          type: string
          default: 'userProfile:created'
    UserProfileUpdatedEvent:
      properties:
        data:
          description: Event data
          allOf:
            - $ref: '#/components/schemas/UserProfile'
        eventType:
          type: string
          default: 'userProfile:updateAllFields'
    UserProfile:
      properties:
        uuid:
          type: string
          description: User Profile internal uuid (in Dayio system)
        fullName:
          type: string
          description: User Profile name
        externalId:
          type: string
          description: User Profile external id (in the client system)
        active:
          type: boolean
          description: Is this company active or not
        matricula:
          type: string
          description: User profile matricula
        pis:
          type: string
          description: User profile pis
    ClientCreatedEvent:
      properties:
        data:
          description: Event data
          allOf:
            - $ref: '#/components/schemas/Client'
        eventType:
          type: string
          default: 'client:created'
    ClientUpdatedEvent:
      properties:
        data:
          description: Event data
          allOf:
            - $ref: '#/components/schemas/Client'
        eventType:
          type: string
          default: 'client:updated'
    ServiceCreatedEvent:
      properties:
        data:
          description: Event data
          allOf:
            - $ref: '#/components/schemas/Service'
        eventType:
          type: string
          default: 'service:created'
    ServiceUpdatedEvent:
      properties:
        data:
          description: Event data
          allOf:
            - $ref: '#/components/schemas/Service'
        eventType:
          type: string
          default: 'service:updated'
    ProjectCreatedEvent:
      properties:
        data:
          description: Event data
          allOf:
            - $ref: '#/components/schemas/Project'
        eventType:
          type: string
          default: 'project:created'
    ProjectUpdatedEvent:
      properties:
        data:
          description: Event data
          allOf:
            - $ref: '#/components/schemas/Project'
        eventType:
          type: string
          default: 'project:updated'
    TaskCreatedEvent:
      properties:
        data:
          description: Event data
          allOf:
            - $ref: '#/components/schemas/Task'
        eventType:
          type: string
          default: 'task:created'
    TaskUpdatedEvent:
      properties:
        data:
          description: Event data
          allOf:
            - $ref: '#/components/schemas/Task'
        eventType:
          type: string
          default: 'task:updated'
    Client:
      properties:
        name:
          type: string
          description: Client name
        uuid:
          type: string
          description: Client uuid
        externalId:
          type: string
          description: Client external identifier
        email:
          type: string
          description: Client contact person email
        contactPerson:
          type: string
          description: Client contact person name
        phoneNumber:
          type: string
          description: Client contact person phone number
        companyUuid:
          type: string
          description: Client related company uuid
    Service:
      properties:
        uuid:
          type: string
          description: Service uuid
        externalId:
          type: string
          description: Service external identifier
        name:
          type: string
          description: Service name
        costPerHour:
          type: number
          description: Service cost per hour
        startDate:
          type: string
          description: Service start date
        status:
          type: string
          description: Service status
        isDefault:
          type: boolean
          description: Is service default for the company
    Project:
      properties:
        uuid:
          type: string
          description: Project uuid
        externalId:
          type: string
          description: Project external identifier
        name:
          type: string
          description: Project name
        ownerUuid:
          type: string
          description: Project owner user uuid
        locationUuids:
          type: array
          items:
            type: string
          description: Project related location uuid's
        clientUuid:
          type: string
          description: Project related client uuid
        deletedAt:
          type: string
          description: Project deleted at date
        status:
          type: string
          description: Project status
        restrictBasedOnSchedule:
          type: boolean
        estimatedHours:
          type: number
          description: Project estimated hours number
        estimatedCost:
          type: number
          description: Project estimated cost number
        isPublic:
          type: boolean
          description: Is project accessible for all members
        clientExternalId:
          type: string
          description: Project client external identifier
    Task:
      properties:
        uuid:
          type: string
          description: Task uuid
        externalId:
          type: string
          description: Task external identifier
        name:
          type: string
          description: Task name
        projectUuid:
          type: string
          description: Task project uuid
        deletedAt:
          type: string
          description: Task deleted at date
        projectExternalId:
          type: string
          description: Task project external identifier
    ServiceProfile:
      properties:
        userProfileUuid:
          type: string
          description: User uuid that was associated with service
        serviceUuid:
          type: string
          description: Service uuid
        companyUuid:
          type: string
          description: Related company uuid
        createdBy:
          type: string
          description: User uuid what was executed association
        createdAt:
          type: string
          description: User uuid that was invoked association
        createdByExternalId:
          type: string
          description: User external identifier that was invoked association
        userProfileExternalId:
          type: string
          description: User external identifier that was associated to service
    ProjectProfile:
      properties:
        userProfileUuid:
          type: string
          description: User uuid that was associated with project
        projectUuid:
          type: string
          description: Project uuid
        companyUuid:
          type: string
          description: Related company uuid
        createdBy:
          type: string
          description: User uuid what was executed association
        createdAt:
          type: string
          description: User uuid that was invoked association
        createdByExternalId:
          type: string
          description: User external identifier that was invoked association
        userProfileExternalId:
          type: string
          description: User external identifier that was associated to service
        projectExternalId:
          type: string
          description: Project external identifier
    ProjectService:
      properties:
        serviceUuid:
          type: string
          description: Service uuid
        projectUuid:
          type: string
          description: Project uuid
        companyUuid:
          type: string
          description: Related company uuid
        createdBy:
          type: string
          description: User uuid what was executed association
        createdAt:
          type: string
          description: User uuid that was invoked association
        createdByExternalId:
          type: string
          description: User external identifier that was invoked association
        serviceExternalId:
          type: string
          description: Service external identifier that was associated to project
        projectExternalId:
          type: string
          description: Project external identifier